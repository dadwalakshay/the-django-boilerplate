"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import json
import os

from django.core.exceptions import ImproperlyConfigured


# Path of directory where JSON config file is placed, or Current directory as
# default path.
CONFIG_FILE_PATH = os.environ.get('CONFIG_FILE_PATH') or os.getcwd()

try:
    with open(CONFIG_FILE_PATH + '/config.json') as cfg:
        try:
            fallback_config = json.load(cfg)
        except json.JSONDecodeError:
            fallback_config = {}
except FileNotFoundError:
    fallback_config = {}


def read_config(key=None, fallback_value=None):
    """Helper function to read environment variables from host machine.
    To keep sensitive data i.e. Secret keys and DB credentials, separated from
    codebase to avoid leakage of any such details into the source code.

    Args:
        key (str): str object of environment variable's name.
        default (object): Default value to be returned, if environment
                            variable does not exists.
    Returns:
        object: Returns value of environment variable if it exists else
                default value.
    Raises:
        ImproperlyConfigured: Raises an exception if environment variable is
                              not defined.
    Example:
        Key and its default value to be passed as arguments. Suggested
        nomenclature for environment variables, <KEY_NAME>
        >>> read_config('SECRET_KEY', 'secret_key_value')
        'some_gibberish_secret_key_value'
    """
    if isinstance(key, str):
        try:
            return os.environ[key]
        except KeyError:
            if (fallback_value := fallback_config.get(key) or fallback_value) is None:
                raise ImproperlyConfigured(
                    f'Set value for `{key}` in environment valriable or \
                    fallback config or provide default value.'
                )

    return fallback_value


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = read_config(
    'SECRET_KEY',
    'django-insecure-105on=hqccmyf652$b+ol_q@roh@k8$z7kj9$--n3l&op*mpl-'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = read_config('IS_DEBUG', True)

ALLOWED_HOSTS = read_config('ALLOWED_HOSTS', ['*', ])


# Application definition

CORE_DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
)

THIRD_PARTY_DJANGO_APPS = (
    'rest_framework',
)

INSTALLED_APPS = CORE_DJANGO_APPS + THIRD_PARTY_DJANGO_APPS

CORE_DJANGO_MIDDLEWARE = (
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
)

THIRD_PARTY_DJANGO_MIDDLEWARE = ()

CUSTOM_MIDDLEWARE = ()

MIDDLEWARE = (
    CORE_DJANGO_MIDDLEWARE + THIRD_PARTY_DJANGO_MIDDLEWARE + CUSTOM_MIDDLEWARE
)

ROOT_URLCONF = 'urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DB_ENGINE = read_variable(
    'DB_ENGINE',
    'django.db.backends.mysql'
)
DB_NAME = read_variable('DB_NAME', 'local_db')
DB_USER = read_variable('DB_USER_NAME', 'root')
DB_PASSWORD = read_variable('DB_USER_PASSWORD', 'root')
DB_HOST = read_variable('DB_HOST', 'localhost')
DB_PORT = read_variable('DB_PORT', 3306)

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT
    },
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

# Using IST timezone, change it accordingly.
TIME_ZONE = read_config('DJANGO_TIMEZONE', 'Asia/Kolkata')

USE_I18N = False

USE_L10N = False

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
